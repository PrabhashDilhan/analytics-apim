/* Enter a unique ExecutionPlan */
@Plan:name('ExecutionPlanForExceptionClass')

/* Enter a unique description for ExecutionPlan */
@Plan:description('Fetch Exception Class Names From Loganalyzer ')

/* define streams/tables and write queries here ... */

@Plan:trace('false')

@Import('loganalyzer:1.0.0', arbitrary.data='true')
define stream Loganalyzer (tenantID string, arbitraryDataMap Object);


@Export('exception_class_names:1.0.0')
define stream uniqueMessages (id int, class_name string);

@from(eventtable = 'analytics.table', table.name = 'EXCEPTION_CLASS_NAMES', primary.keys = 'id', indices = 'id, class_name')
define table Finall(id int, class_name string);

define trigger trig at every 1 sec;
define table indexTable (key string, id int);
define table classTable ( className string);

--set one at the start 
from trig join Finall
select
	id as id,
	class_name as class_name
insert into Final;

from trig
select
	'key' as key,
	1 as id
insert into indexTable;

from Loganalyzer
select cast(map:get(arbitraryDataMap , 'class') , 'string') as className,cast(map:get(arbitraryDataMap , 'level') , 'string') as level
insert into ClassNameStream;

from ClassNameStream[level == 'ERROR' or level == 'WARN']
insert into ErrorClassNameStream;

from Final
select class_name as className
insert into classTable;

from ErrorClassNameStream[not(classTable.className == className in classTable)]
select 
	className
insert into DistinctClassNameStream;

from Final 
select 
	'key' as key,
	max(id) as id
insert overwrite indexTable
on key == indexTable.key;

from DistinctClassNameStream join indexTable
select 
	max(id) as id,
	className
insert into IndexedClassNameStream;

from IndexedClassNameStream
select 
	id+1 as id,
	className as class_name
insert into uniqueMessages;